"""
Smart EPG Fetcher - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ EPG —Å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º.
"""

from __future__ import annotations

import json
import logging
from pathlib import Path
from typing import Any, Dict, List

from .config import Config
from .epg_manager import EPGManager
from .iptv_api import fetch_epg as _original_fetch_epg

logger = logging.getLogger(__name__)


def smart_fetch_epg(cfg: Config, session, data_dir: str = "data") -> List[Dict[str, Any]]:
    """
    –£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ EPG –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º.
    
    –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
    1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    2. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    3. –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    4. –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    5. –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
    
    Args:
        cfg: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        session: HTTP —Å–µ—Å—Å–∏—è
        data_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ EPG –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info("üß† –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ EPG –¥–∞–Ω–Ω—ã—Ö")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä EPG
    epg_manager = EPGManager(data_dir)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    target_range = epg_manager.get_target_date_range()
    logger.info(f"üéØ –¶–µ–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {target_range.start.date()} - {target_range.end.date()}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    analysis = epg_manager.analyze_existing_data(target_range)
    
    if not analysis.needs_update:
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        raw_epg_file = Path(data_dir) / "raw_epg.json"
        if raw_epg_file.exists():
            with open(raw_epg_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    
    logger.info(f"üìä –ê–Ω–∞–ª–∏–∑: {len(analysis.existing_ranges)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤, "
               f"{len(analysis.missing_ranges)} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    existing_data = []
    raw_epg_file = Path(data_dir) / "raw_epg.json"
    if raw_epg_file.exists():
        try:
            with open(raw_epg_file, 'r', encoding='utf-8') as f:
                existing_data = json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            logger.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞")
            existing_data = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
    all_new_data = []
    if analysis.missing_ranges:
        request_params_list = epg_manager.calculate_optimal_request_params(analysis.missing_ranges)
        
        for i, request_params in enumerate(request_params_list, 1):
            logger.info(f"üì° –ó–∞–ø—Ä–æ—Å {i}/{len(request_params_list)}: {request_params['range_description']}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            temp_cfg = _create_temp_config(cfg, request_params)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            try:
                new_data = _original_fetch_epg(temp_cfg, session)
                all_new_data.extend(new_data)
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(new_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {request_params['range_description']}: {e}")
                continue
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if all_new_data or analysis.outdated_items:
        logger.info(f"üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {len(existing_data)} + {len(all_new_data)} –Ω–æ–≤—ã—Ö")
        merged_data = epg_manager.merge_epg_data(existing_data, all_new_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        raw_epg_file.parent.mkdir(exist_ok=True)
        with open(raw_epg_file, 'w', encoding='utf-8') as f:
            json.dump(merged_data, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        epg_manager.save_metadata(analysis, request_params_list if analysis.missing_ranges else [])
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(merged_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ EPG")
        return merged_data
    else:
        logger.info("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Ç")
        return existing_data


def _create_temp_config(original_cfg: Config, request_params: Dict[str, str]) -> Config:
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞."""
    # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    temp_params = original_cfg.iptv_params.copy()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
    temp_params.update({
        "epg_from": request_params["epg_from"],
        "epg_limit": request_params["epg_limit"]
    })
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    temp_cfg = Config(
        iptv_base_url=original_cfg.iptv_base_url,
        iptv_params=temp_params,
        iptv_headers=original_cfg.iptv_headers,
        http_timeout=original_cfg.http_timeout,
        http_retries=original_cfg.http_retries,
        http_backoff=original_cfg.http_backoff,
        cache_enabled=original_cfg.cache_enabled,
        cache_path=original_cfg.cache_path,
        cache_expire=original_cfg.cache_expire,
        tmdb_api_key=original_cfg.tmdb_api_key,
        tmdb_base_url=original_cfg.tmdb_base_url,
        tmdb_image_base=original_cfg.tmdb_image_base,
        log_level=original_cfg.log_level,
        api_host=original_cfg.api_host,
        api_port=original_cfg.api_port,
        api_cache_ttl=original_cfg.api_cache_ttl,
        api_cors_origins=original_cfg.api_cors_origins,
        auto_run_pipeline=original_cfg.auto_run_pipeline
    )
    
    return temp_cfg


# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –∑–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
def fetch_epg(cfg: Config, session) -> List[Dict[str, Any]]:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    return smart_fetch_epg(cfg, session)
